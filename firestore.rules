/**
 * @file Firestore Security Rules
 * @description This ruleset implements a role-based access control model with public read access to regenerative intents and owner-only access to user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile data, accessible only to the user themselves.
 * - /regenerative_intents/{intentId}: Stores regenerative intent submissions, publicly readable but writable only by admin users.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and accessible only to the owning user.
 * - Listing of user profiles is disallowed for privacy reasons.
 * - Regenerative intents are publicly readable to promote transparency and community engagement.
 * - Writes to regenerative intents are restricted to authenticated users with an admin role.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines access rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - User TLkJpbmRHeeg9HUaw6MCGsfryap2 can create their own profile.
     * @allow (get, update, delete) - User TLkJpbmRHeeg9HUaw6MCGsfryap2 can get, update, and delete their own profile.
     * @deny (create) - User ABC cannot create a profile for user XYZ.
     * @deny (update, delete) - User ABC cannot update or delete user XYZ's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for regenerative intent submissions.
     * @path /regenerative_intents/{intentId}
     * @allow (get, list) - Any user can read regenerative intent submissions.
     * @allow (create, update, delete) - Only admin users can create, update, and delete regenerative intent submissions.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete regenerative intent submissions.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /regenerative_intents/{intentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once roles are implemented.
    }
  }
}