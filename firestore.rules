/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-ownership and admin-controlled access,
 * while remaining flexible on data shapes to facilitate rapid prototyping.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profiles, accessible only to the user themselves.
 * - `/regenerative_intents/{intentId}`: Stores submitted regenerative intents. Admin users can modify these intents.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Admin users can read and modify regenerative intents.
 *
 * Denormalization for Authorization:
 * - The `RegenerativeIntent` entity does not contain an explicit `ownerId` or `authorId` field. Thus, it is assumed
 *   that the intent itself is a public resource. However, to enable admin approval/rejection as requested, we need an `isAdmin()` function.
 *   This example assumes your application has some mechanism to set a custom claim on user accounts to indicate admin status.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (get, update, delete) User with ID 'user123' cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      // Define a function to check if the current user is the owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allow users to read their own profile
      allow get: if isOwner(userId);
      // Allow users to list, only the owner can.
      allow list: if false; // Listing all users is generally not a good idea
      // Allow users to create their profile if the user ID matches their auth ID
      allow create: if isOwner(userId);
      // Allow users to update their own profile
      allow update: if isOwner(userId);
      // Allow users to delete their own profile
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows admin users to read and modify regenerative intents.
     * @path /regenerative_intents/{intentId}
     * @allow (get, list) Any user can read and list intents.
     * @allow (create) Any user can create an intent.
     * @allow (update, delete) Admin user can update and delete intents.
     * @deny (update, delete) Non-admin user cannot update or delete intents.
     * @principle Restricts write access to admin users only.
     */
    match /regenerative_intents/{intentId} {
       // Define a function to check if the current user is an admin
      function isAdmin() {
        return request.auth.token.admin == true;
      }

      // Allow anyone to read or list intents
      allow get, list: if true;

      // Allow anyone to create an intent
      allow create: if isSignedIn();

      // Allow admins to update and delete intents
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Define a function to check if a user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}