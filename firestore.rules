/**
 * @file Firestore Security Rules
 * @description This ruleset implements a role-based access control model with an admin override.
 * All users can read public user profiles.
 * Only authenticated admin users can create, read, update, and delete regenerative intents.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /regenerative_intents/{intentId}: Stores regenerative intents.
 *
 * Key Security Decisions:
 * - Public read access for user profiles.
 * - Admin-only access to regenerative intents.
 * - No listing of users is allowed.
 *
 * Denormalization for Authorization:
 *   No denormalization is used in this configuration. Access control is based on the `request.auth.uid`.
 *
 * Structural Segregation:
 *   There are no private and public data segregations in this file.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the requested user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     * In a real application, this would likely involve checking a custom claim on the user's JWT.
     * For prototyping purposes, this is always true.  DO NOT USE IN PRODUCTION.
     */
    function isAdmin() {
      return true;
    }

    /**
     * @description Rule set for user profiles.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read any user profile.
     * @deny (list) Listing all users is not allowed.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (create) User cannot create a profile for another user.
     * @principle Enforces user-ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false; // Listing all users is disallowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rule set for regenerative intents. Only admins can create, read, update, and delete intents.
     * @path /regenerative_intents/{intentId}
     * @allow (create) Admin user can create a regenerative intent.
     * @allow (get) Admin user can read a regenerative intent.
     * @allow (update) Admin user can update a regenerative intent.
     * @allow (delete) Admin user can delete a regenerative intent.
     * @deny (create) Non-admin user cannot create a regenerative intent.
     * @deny (update) Non-admin user cannot update a regenerative intent.
     * @principle Enforces admin-only access for writes.
     */
    match /regenerative_intents/{intentId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}