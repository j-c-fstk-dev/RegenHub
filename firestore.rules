/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a role-based access control model. Only authenticated users can create user profiles.
 *  Regenerative intents can only be updated by authenticated users with admin privileges.
 * @data-structure
 *  - /users/{userId}: Stores public user profiles.
 *  - /regenerative_intents/{intentId}: Stores regenerative intents.
 * @key-security-decisions
 *  - User listing is disallowed.
 *  - Only authenticated users can update user profiles.
 *  - Only authenticated users with admin privileges can update regenerative intents.
 * @denormalization-for-authorization To enable role-based access control, admin users will have a custom claim set on their Firebase user object.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin based on custom claims.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @allow (get, update) - Authenticated user with matching id.
     * @deny (get, update) - Authenticated user attempts to access a different user's profile.
     * @principle Enforces document ownership for writes, authenticated access for reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false; // User deletion is not allowed.
    }

    /**
     * @description Rules for regenerative intents.
     * @path /regenerative_intents/{intentId}
     * @allow (get, list) - Public access.
     * @allow (create) - No direct creation, only through backend functions.
     * @allow (update, delete) - Only admins can update or delete intents.
     * @principle Allows public reads but restricts writes to admins.
     */
    match /regenerative_intents/{intentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}