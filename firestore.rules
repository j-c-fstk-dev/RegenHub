/**
 * @fileOverview Firestore Security Rules for the Regenerative Intent application.
 *
 * Core Philosophy:
 * This ruleset enforces a public-read, owner-write model for regenerative intents,
 * allowing anyone to view the submitted intents while restricting modifications to
 * administrative users. User profiles are readable by anyone but writable only by the user.
 *
 * Data Structure:
 * - /regenerative_intents/{intentId}: Stores the submitted regenerative intents.
 * - /users/{userId}: Stores public user profile information.
 *
 * Key Security Decisions:
 * - Users can list all regenerative intents.
 * - Only authenticated admins can create, update, or delete intents.
 * - Users can only modify their own profile data.
 *
 * Denormalization for Authorization:
 *  The current data model doesn't support an `ownerId` field on `regenerative_intents`.
 *  Admin status is not denormalized. Assuming an external mechanism to identify admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to regenerative intents while restricting write access to admins.
     * @path /regenerative_intents/{intentId}
     * @allow (get, list) All users can view regenerative intents.
     * @deny (create, update, delete) Non-admin users cannot modify regenerative intents.
     * @principle Allows public read access with restricted writes.
     */
    match /regenerative_intents/{intentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Enforces user-ownership for profile data, where only the user can modify their own profile.
     * @path /users/{userId}
     * @allow (create) A user can create their own profile.
     * @allow (get, list) Any user can read any profile, as profiles are public.
     * @allow (update, delete) A user can only update or delete their own profile.
     * @deny Requests that attempt to modify another user's profile.
     * @principle Enforces user-ownership for writes.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Placeholder for admin check. Implement your admin authentication logic here.
      // Example: return request.auth.token.email == 'admin@example.com';
      return false;
    }
  }
}