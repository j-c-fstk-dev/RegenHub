/**
 * @fileoverview Firestore Security Rules for the regenerative intents application.
 *
 * Core Philosophy:
 * This ruleset focuses on securing user data and regenerative intent submissions.
 * Users have ownership over their profiles, while regenerative intents are publicly readable but
 * only writable by authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores public profile information for each user.
 * - /regenerative_intents/{intentId}: Stores submitted regenerative intents.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Regenerative intents are publicly readable to encourage transparency.
 * - Only authenticated users can submit or modify regenerative intents. The `status` field can only be updated by a user with admin claims.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can only get, update, or delete their own profile.
     * @deny (create) - User cannot create a profile with an ID that doesn't match their auth.uid.
     * @deny (list) - Listing users is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for regenerative intents.
     * @path /regenerative_intents/{intentId}
     * @allow (get, list) - Anyone can read the intents.
     * @allow (create) - Only authenticated users can submit intents.
     * @allow (update, delete) - Only authenticated users can update or delete intents, and only if they are the original submitter (owner).
     * @deny (create) - Non-authenticated users cannot submit intents.
     * @deny (update, delete) - Non-authenticated users cannot update or delete intents.
     * @principle Public read access with owner-only writes.
     */
    match /regenerative_intents/{intentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }
  }
}