{
  "entities": {
    "RegenerativeIntent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RegenerativeIntent",
      "type": "object",
      "description": "Represents a submitted regenerative intent.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Regenerative Intent."
        },
        "actionName": {
          "type": "string",
          "description": "Name of the regenerative action."
        },
        "actionType": {
          "type": "string",
          "description": "Type of regenerative action (e.g., planting, cleaning)."
        },
        "actionDate": {
          "type": "string",
          "description": "Date when the action was performed.",
          "format": "date-time"
        },
        "location": {
          "type": "string",
          "description": "Location where the action was performed (textual description)."
        },
        "latitude": {
          "type": "number",
          "description": "Latitude of the location where the action was performed."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude of the location where the action was performed."
        },
        "numberOfParticipants": {
          "type": "number",
          "description": "Number of participants involved in the action."
        },
        "shortDescription": {
          "type": "string",
          "description": "Brief description of the action."
        },
        "mediaUrls": {
          "type": "array",
          "description": "URLs of media files (images, videos) related to the action.",
          "items": {
            "type": "string"
          }
        },
        "socialMediaLinks": {
          "type": "array",
          "description": "Links to social media posts related to the action.",
          "items": {
            "type": "string"
          }
        },
        "responsibleName": {
          "type": "string",
          "description": "Name of the person responsible for the action."
        },
        "projectName": {
          "type": "string",
          "description": "Name of the project or collective (if applicable)."
        },
        "customTag": {
          "type": "string",
          "description": "Custom tag created by the user for the action."
        },
        "autoGeneratedTag": {
          "type": "string",
          "description": "Auto-generated tag for the action if no custom tag is provided."
        },
        "email": {
          "type": "string",
          "description": "Email address for contact.",
          "format": "email"
        },
        "certificateRequested": {
          "type": "boolean",
          "description": "Indicates whether a digital certificate was requested."
        },
        "submissionDate": {
          "type": "string",
          "description": "Date and time when the intent was submitted.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the intent (e.g., pending, verified, rejected)."
        }
      },
      "required": [
        "id",
        "actionName",
        "actionType",
        "actionDate",
        "location",
        "numberOfParticipants",
        "shortDescription",
        "responsibleName",
        "email",
        "certificateRequested",
        "submissionDate",
        "status"
      ]
    },
    "AdminUser": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AdminUser",
      "type": "object",
      "description": "Represents an administrator user who can verify intents. (Authentication system data not stored)",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Admin User."
        },
        "email": {
          "type": "string",
          "description": "Email address of the admin user.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "email"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/regenerative_intents/{intentId}",
        "definition": {
          "entityName": "RegenerativeIntent",
          "schema": {
            "$ref": "#/backend/entities/RegenerativeIntent"
          },
          "description": "Stores submitted regenerative intents.  Admin users can read and modify these intents. Includes all intent data including mediaUrls and status for verification and display in the admin panel.",
          "params": [
            {
              "name": "intentId",
              "description": "Unique identifier for the Regenerative Intent document."
            }
          ]
        }
      },
      {
        "path": "/admin_users/{adminId}",
        "definition": {
          "entityName": "AdminUser",
          "schema": {
            "$ref": "#/backend/entities/AdminUser"
          },
          "description": "Stores administrator user profiles, used for authentication and authorization to access the admin panel.",
          "params": [
            {
              "name": "adminId",
              "description": "Unique identifier for the Admin User."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the Regen Hub application, emphasizing a clear separation of concerns, authorization independence, and scalability. The primary collection, `/regenerative_intents`, stores the submitted intents.  To facilitate the admin panel functionality, all submitted intents are stored directly in this top-level collection, enabling easy querying and display. An `/admin_users` collection stores administrator details for authentication purposes. This setup prioritizes simplicity for the MVP, and denormalization to remove authorization dependencies.\n\n**Authorization Independence:**  There are no subcollections or hierarchical dependencies requiring `get()` calls in the security rules. Access to intents is controlled via the `status` field and verified through the `admin_users` collection.\n\n**QAPs (Queries are not Filters):**\n*   The structure enables listing operations. Only admins can read all intents.\n\n\n*   Non-admins cannot read any documents.  List operations are secured because only authenticated admins can list the `/regenerative_intents` collection.\n\n\n*   The structure uses structural segregation.\n\n\n*   Admin role existence in the `/admin_users` collection determines administrative privileges."
  }
}